import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
from game_data import Player, Enemy, Item
import database
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
player = None
current_enemy = None
battle_in_progress = False


def main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å", callback_data="explore")],
        [InlineKeyboardButton("–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
        [InlineKeyboardButton("–ú–∞–≥–∞–∑–∏–Ω", callback_data="shop_menu")],
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", callback_data="upgrade_stats")],
    ]
    return InlineKeyboardMarkup(keyboard)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global player
    user = update.effective_user
    player = database.load_player(user.id) or Player(user.id, user.first_name)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –¢—ã –≤ –º–∏—Ä–µ RPG.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard()
    )


async def handle_battle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global player, current_enemy, battle_in_progress
    query = update.callback_query
    await query.answer()

    if query.data == "fight":
        if not current_enemy:
            current_enemy = Enemy.generate_random(player)

        # –ò–≥—Ä–æ–∫ –∞—Ç–∞–∫—É–µ—Ç
        damage_dealt = player.attack(current_enemy)

        if current_enemy.health <= 0:
            # –ü–æ–±–µ–¥–∞
            player.gold += current_enemy.reward
            player.exp += current_enemy.exp_reward
            level_up_msg = ""
            if player.level_up():
                level_up_msg = "\n‚≠ê –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã {} —É—Ä–æ–≤–Ω—è!".format(player.level)
                # –ü—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è –≤—Ä–∞–≥–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å–∏–ª—å–Ω–µ–µ
                current_enemy = Enemy.generate_random(player)

            database.save_player(player)

            await query.edit_message_text(
                f"–¢—ã –ø–æ–±–µ–¥–∏–ª {current_enemy.name} (–£—Ä. {current_enemy.level})!\n"
                f"–ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: {damage_dealt}\n"
                f"–ù–∞–≥—Ä–∞–¥–∞: +{current_enemy.reward} –∑–æ–ª–æ—Ç–∞, +{current_enemy.exp_reward} –æ–ø—ã—Ç–∞{level_up_msg}\n"
                f"–¢–≤–æ–∏ HP: {player.health}/{player.max_health}",
                reply_markup=main_menu_keyboard()
            )
            current_enemy = None
            battle_in_progress = False
        else:
            # –ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç
            damage_taken = current_enemy.attack(player)

            if player.health <= 0:
                # –ü–æ—Ä–∞–∂–µ–Ω–∏–µ
                await query.edit_message_text(
                    f"–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –≤ –±–æ—é —Å {current_enemy.name} (–£—Ä. {current_enemy.level})!\n"
                    f"–ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: {damage_taken}",
                )
                current_enemy = None
                battle_in_progress = False
            else:
                # –ë–æ–π –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
                keyboard = [
                    [InlineKeyboardButton(f"–ê—Ç–∞–∫–æ–≤–∞—Ç—å ({player.attack_power} —É—Ä–æ–Ω–∞)", callback_data="fight")],
                    [InlineKeyboardButton("–£–±–µ–∂–∞—Ç—å", callback_data="run")]
                ]

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–µ–ª—å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
                if any(item.type == "potion" for item in player.inventory):
                    keyboard.append([InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª—å–µ", callback_data="use_potion")])

                await query.edit_message_text(
                    f"‚öîÔ∏è –ë–æ–π —Å {current_enemy.name} (–£—Ä. {current_enemy.level}):\n"
                    f"–¢—ã –Ω–∞–Ω–µ—Å {damage_dealt} —É—Ä–æ–Ω–∞\n"
                    f"–ú–æ–Ω—Å—Ç—Ä –∞—Ç–∞–∫—É–µ—Ç –∏ –Ω–∞–Ω–æ—Å–∏—Ç {damage_taken} —É—Ä–æ–Ω–∞\n\n"
                    f"–°–æ—Å—Ç–æ—è–Ω–∏–µ:\n"
                    f"{current_enemy.name}: {current_enemy.health}/{current_enemy.max_health} HP\n"
                    f"–¢–≤–æ–∏ HP: {player.health}/{player.max_health}",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )


async def use_potion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global player, current_enemy, battle_in_progress
    query = update.callback_query
    await query.answer()

    # –ò—â–µ–º –∑–µ–ª—å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
    potions = [item for item in player.inventory if item.type == "potion"]

    if not potions:
        await query.answer("–£ —Ç–µ–±—è –Ω–µ—Ç –∑–µ–ª–∏–π –ª–µ—á–µ–Ω–∏—è!")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–µ–ª—å–µ
    potion = potions[0]
    player.heal(potion.value)
    player.inventory.remove(potion)
    database.save_player(player)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—è
    keyboard = [
        [InlineKeyboardButton(f"–ê—Ç–∞–∫–æ–≤–∞—Ç—å ({player.attack_power} —É—Ä–æ–Ω–∞)", callback_data="fight")],
        [InlineKeyboardButton("–£–±–µ–∂–∞—Ç—å", callback_data="run")]
    ]

    if len(potions) > 1:  # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –∑–µ–ª—å—è
        keyboard.append([InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª—å–µ", callback_data="use_potion")])

    await query.edit_message_text(
        f"–¢—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª {potion.name} –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª {potion.value} HP!\n\n"
        f"‚öîÔ∏è –ë–æ–π —Å {current_enemy.name} (–£—Ä. {current_enemy.level}):\n"
        f"{current_enemy.name}: {current_enemy.health}/{current_enemy.max_health} HP\n"
        f"–¢–≤–æ–∏ HP: {player.health}/{player.max_health}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_shop_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–û—Ä—É–∂–∏–µ", callback_data="shop_weapons")],
        [InlineKeyboardButton("–ë—Ä–æ–Ω—è", callback_data="shop_armor")],
        [InlineKeyboardButton("–ó–µ–ª—å—è", callback_data="shop_potions")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
    ]

    await query.edit_message_text(
        "üõí –ú–∞–≥–∞–∑–∏–Ω - –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_weapons_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    weapons = Item.generate_weapons(player.level)
    keyboard = []

    for weapon in weapons:
        owned = any(item.id == weapon.id for item in player.inventory)
        if owned:
            text = f"‚úì {weapon.name} (–∫—É–ø–ª–µ–Ω–æ)"
            callback = "owned_item"
        else:
            text = f"{weapon.name} - {weapon.price}üí∞ (+{weapon.value} –∞—Ç–∞–∫–∏)"
            callback = f"buy_{weapon.id}"

        keyboard.append([InlineKeyboardButton(text, callback_data=callback)])

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="shop_menu")])

    await query.edit_message_text(
        "üõí –ú–∞–≥–∞–∑–∏–Ω –æ—Ä—É–∂–∏—è:\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_armor_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    armors = Item.generate_armor(player.level)
    keyboard = []

    for armor in armors:
        owned = any(item.id == armor.id for item in player.inventory)
        if owned:
            text = f"‚úì {armor.name} (–∫—É–ø–ª–µ–Ω–æ)"
            callback = "owned_item"
        else:
            text = f"{armor.name} - {armor.price}üí∞ (+{armor.value} –∑–∞—â–∏—Ç—ã)"
            callback = f"buy_{armor.id}"

        keyboard.append([InlineKeyboardButton(text, callback_data=callback)])

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="shop_menu")])

    await query.edit_message_text(
        "üõí –ú–∞–≥–∞–∑–∏–Ω –±—Ä–æ–Ω–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_potions_shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    potions = Item.generate_potions()
    keyboard = []

    for potion in potions:
        keyboard.append([InlineKeyboardButton(
            f"{potion.name} - {potion.price}üí∞ (–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {potion.value} HP)",
            callback_data=f"buy_{potion.id}"
        )])

    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="shop_menu")])

    await query.edit_message_text(
        "üõí –ú–∞–≥–∞–∑–∏–Ω –∑–µ–ª–∏–π:\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–µ–ª—å–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global player
    query = update.callback_query
    await query.answer()

    item_id = int(query.data.split("_")[1])

    # –ò—â–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –º–∞–≥–∞–∑–∏–Ω–∞
    shop_items = Item.generate_weapons(player.level) + Item.generate_armor(player.level) + Item.generate_potions()
    item = next((i for i in shop_items if i.id == item_id), None)

    if not item:
        await query.edit_message_text(
            "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=main_menu_keyboard()
        )
        return

    if player.gold >= item.price:
        player.gold -= item.price

        if item.type == "potion":
            # –î–ª—è –∑–µ–ª–∏–π –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            player.inventory.append(item)
            message = f"–¢—ã –∫—É–ø–∏–ª {item.name}! –¢–µ–ø–µ—Ä—å –µ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è."
        else:
            # –î–ª—è —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
            if item.type == "weapon":
                player.attack_power += item.value
            elif item.type == "armor":
                player.defense += item.value
            player.inventory.append(item)
            message = f"–¢—ã –∫—É–ø–∏–ª {item.name}! –¢–≤–æ–π {'–∞—Ç–∞–∫–∞' if item.type == 'weapon' else '–∑–∞—â–∏—Ç–∞'} —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –Ω–∞ {item.value}"

        database.save_player(player)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞–≥–∞–∑–∏–Ω–∞
        if item.type == "weapon":
            await show_weapons_shop(update, context)
        elif item.type == "armor":
            await show_armor_shop(update, context)
        else:
            await show_potions_shop(update, context)
    else:
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")


async def show_upgrade_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    upgrade_cost = player.level * 100
    keyboard = [
        [InlineKeyboardButton(f"–£–≤–µ–ª–∏—á–∏—Ç—å –∞—Ç–∞–∫—É (+2) - {upgrade_cost}üí∞", callback_data="upgrade_attack")],
        [InlineKeyboardButton(f"–£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞—â–∏—Ç—É (+1) - {upgrade_cost}üí∞", callback_data="upgrade_defense")],
        [InlineKeyboardButton(f"–£–≤–µ–ª–∏—á–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ (+20) - {upgrade_cost}üí∞", callback_data="upgrade_health")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")]
    ]

    await query.edit_message_text(
        f"üîß –£–ª—É—á—à–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–£—Ä. {player.level}):\n"
        f"–¢–µ–∫—É—â–∞—è –∞—Ç–∞–∫–∞: {player.attack_power}\n"
        f"–¢–µ–∫—É—â–∞—è –∑–∞—â–∏—Ç–∞: {player.defense}\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {player.max_health}\n\n"
        f"–£ —Ç–µ–±—è –µ—Å—Ç—å: {player.gold}üí∞",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_upgrade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global player
    query = update.callback_query
    await query.answer()

    upgrade_type = query.data.split("_")[1]
    upgrade_cost = player.level * 100

    if player.gold >= upgrade_cost:
        player.gold -= upgrade_cost

        if upgrade_type == "attack":
            player.attack_power += 2
            message = "–ê—Ç–∞–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 2!"
        elif upgrade_type == "defense":
            player.defense += 1
            message = "–ó–∞—â–∏—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ 1!"
        elif upgrade_type == "health":
            player.max_health += 20
            player.health += 20
            message = "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —É–≤–µ–ª–∏—á–µ–Ω–æ –Ω–∞ 20!"

        database.save_player(player)
        await show_upgrade_menu(update, context)
        await query.answer(message)
    else:
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞!")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global player, current_enemy, battle_in_progress
    query = update.callback_query
    await query.answer()

    if query.data == "explore":
        current_enemy = Enemy.generate_random(player)
        battle_in_progress = True

        await query.edit_message_text(
            f"–¢—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª {current_enemy.name} (–£—Ä. {current_enemy.level})!\n"
            f"–£—Ä–æ–Ω: {current_enemy.damage}\n"
            f"–ó–¥–æ—Ä–æ–≤—å–µ: {current_enemy.health}/{current_enemy.max_health}\n"
            f"–ó–∞—â–∏—Ç–∞: {current_enemy.defense}\n\n"
            f"–¢–≤–æ—è –∞—Ç–∞–∫–∞: {player.attack_power} —É—Ä–æ–Ω–∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(f"–ê—Ç–∞–∫–æ–≤–∞—Ç—å ({player.attack_power} —É—Ä–æ–Ω–∞)", callback_data="fight")],
                [InlineKeyboardButton("–£–±–µ–∂–∞—Ç—å", callback_data="run")]
            ])
        )

    elif query.data == "fight":
        await handle_battle(update, context)

    elif query.data == "use_potion":
        await use_potion(update, context)

    elif query.data == "run":
        if battle_in_progress:
            await query.edit_message_text(
                f"–¢—ã —É—Å–ø–µ—à–Ω–æ —Å–±–µ–∂–∞–ª –æ—Ç {current_enemy.name}!",
                reply_markup=main_menu_keyboard()
            )
            current_enemy = None
            battle_in_progress = False
        else:
            await query.edit_message_text(
                "–ù–µ—á–µ–≥–æ —É–±–µ–≥–∞—Ç—å!",
                reply_markup=main_menu_keyboard()
            )

    elif query.data == "stats":
        await query.edit_message_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {player.name} (–£—Ä. {player.level}):\n"
            f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {player.health}/{player.max_health}\n"
            f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {player.attack_power}\n"
            f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {player.defense}\n"
            f"üí∞ –ó–æ–ª–æ—Ç–æ: {player.gold}\n"
            f"üîÆ –û–ø—ã—Ç: {player.exp}/{player.exp_to_level}\n\n"
            f"–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {player.exp_to_level - player.exp} –æ–ø—ã—Ç–∞",
            reply_markup=main_menu_keyboard()
        )

    elif query.data == "inventory":
        weapons = [item for item in player.inventory if item.type == "weapon"]
        armor = [item for item in player.inventory if item.type == "armor"]
        potions = [item for item in player.inventory if item.type == "potion"]

        inventory_text = "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n"

        if weapons:
            inventory_text += "\n‚öîÔ∏è –û—Ä—É–∂–∏–µ:\n" + "\n".join(
                f"- {item.name} (+{item.value} –∞—Ç–∞–∫–∏)" for item in weapons
            )

        if armor:
            inventory_text += "\nüõ°Ô∏è –ë—Ä–æ–Ω—è:\n" + "\n".join(
                f"- {item.name} (+{item.value} –∑–∞—â–∏—Ç—ã)" for item in armor
            )

        if potions:
            inventory_text += "\nüß™ –ó–µ–ª—å—è:\n" + "\n".join(
                f"- {item.name} (–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç {item.value} HP)" for item in potions
            )

        if not any([weapons, armor, potions]):
            inventory_text += "–ü—É—Å—Ç–æ"

        keyboard = []
        if potions:
            keyboard.append([InlineKeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–µ–ª—å–µ", callback_data="use_potion")])
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back")])

        await query.edit_message_text(
            inventory_text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == "shop_menu":
        await show_shop_menu(update, context)

    elif query.data == "shop_weapons":
        await show_weapons_shop(update, context)

    elif query.data == "shop_armor":
        await show_armor_shop(update, context)

    elif query.data == "shop_potions":
        await show_potions_shop(update, context)

    elif query.data.startswith("buy_"):
        await handle_purchase(update, context)

    elif query.data == "upgrade_stats":
        await show_upgrade_menu(update, context)

    elif query.data.startswith("upgrade_"):
        await handle_upgrade(update, context)

    elif query.data == "owned_item":
        await query.answer("–¢—ã —É–∂–µ –∫—É–ø–∏–ª —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç!")

    elif query.data == "back":
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )


def main():
    application = ApplicationBuilder().token("7557001874:AAHrhfextSR463P6_fCRbENzGzozO-MT20E").build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.run_polling()


if __name__ == "__main__":
    main()